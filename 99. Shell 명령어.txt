1. grap
    필터링

2.find
    파일 검색

3. echo
    출력문 (print같은거)

4. ps -f
    현재 실행중인 프로세스 보여주기

5. source
    새로운 프로세스를 생성하지 않으며, 쉘 환경 변수와 설정을 바로 반영할 수 있습니다

6. ls -l
    파일의 권한 확인

7. chmod +권한(r,w,x) 파일명
    - chmod +x 파일명 <- 실행파일로 변경

8.  echo -n
    줄바꿈 없이 출려

9. read
    사용자로 부터 입력을 받는 명령어
    ex) read Name

10. env
    환경변수를 출력하는 명령어
    env | grep PATH 형태로 원하는 변수만 출력 가능 

11. $$
    현재 프로세스에 대한 정보 (pid)출력

12. &
    작업을 백그라운드로 돌림 (비동기 개념으로 다른 작업을 가능하게 함)
    ex) sleep 100 &  <- 100초 동안 대기하는 명령어로 백그라운드에서 동작

13. $!
    제일 마지막에 실행된 백그라운드 작업에 pid 반환

14. jobs/ bg / fg
    -jobs: 현재 쉘에서 백그라운드에 작업을 보여주는 명령어      ex) jobs -l
    -bg: 중지된 프로세스를 백그라운드로 옮겨서 동작     ex) bg %작업번호
    -fg: 백그라운드가 아닌 앞단에서 동작    ex) fg %작업번호

15. ;
    명령어를 구분하는 역할
    Java의 문장 끝을 나타낼때 사용하는 것과 비슷함
    ex) date;echo;cal  <-  오늘 날짜를 출력함

16. declare
    변수를 선언하고 변수의 속성을 부여할 수 있다
    ex) declare -a 변수  <- 배열 변수
        declare -x 변수  <- 환경 변수
        declare -r 변수  <- 읽기 전용 변수

17. 